import {translations, healTranslations, phrases, criticalEffects, hitZones} from "./data.js";
import {DamageSystem} from "./damageSystem.js";
import {BodySystem} from "./bodySystem.js";
import {DiceSystem} from "./diceSystem.js";

export class AttackSystem {
  static async executeAttack(currentStatDifficulty, actor, damage, currentWeapon) {
    if (!actor) return ui.notifications.warn("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞");
    
    const userTarget = Array.from(game.user.targets)[0];
    if (!userTarget) return ui.notifications.warn("–¶–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞");

    const token = userTarget.document;
    if (!token) return ui.notifications.warn("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");

    const target = token.actor;
    if (!target) return ui.notifications.warn("–£ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –∞–∫—Ç—ë—Ä–∞");

    let currentDifficulty = Number(actor.system.props[String(currentStatDifficulty)]);

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∏
    let targetFlags;
    if (token.actorLink) {
      targetFlags = { actorId: target.id };
    } else {
      targetFlags = {
        tokenId: token.id,
        sceneId: token.parent?.id ?? canvas.scene?.id
      };
    }

    // –î–∏–∞–ª–æ–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞—Ç–∞–∫–∏
    const damageTypes = {
      piercing: "–ö–æ–ª—é—â–∏–π",
      slashing: "–†—É–±—è—â–∏–π",
      bludgeoning: "–î—Ä–æ–±—è—â–∏–π"
    };

    const throwDiceForm = `
      <form>
        <div class="form-group">
          <label>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</label>
          <input type="number" name="difficulty" value="${Math.max(1, Number(currentDifficulty))}" />
        </div>
        <div class="form-group">
          <label>–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</label>
          <input type="number" name="modificator" value="0" />
        </div>
        <div class="form-group">
          <label>–®–ú–ê:</label>
          <input type="number" name="multiPenalty" value="0" />
        </div>
        <div class="form-group">
          <label>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –®–ú–ê (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å):</label>
          <input type="number" name="multiPenaltyCheck" value="0"/>
        </div>
        <div class="form-group">
          <label>–¢–∏–ø –±—Ä–æ—Å–∫–∞:</label><br>
          <label><input type="radio" name="mode" value="normal" checked /> –û–±—ã—á–Ω—ã–π</label>
          <label><input type="radio" name="mode" value="advantage" /> –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ</label>
          <label><input type="radio" name="mode" value="disadvantage" /> –ü–æ–º–µ—Ö–∞</label>
        </div>
        <div class="form-group">
          <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤:</label>
          <input type="number" name="count" value="1" min="1" />
        </div>
      </form>`;

    let throwParams;
    try {
      throwParams = await Dialog.prompt({
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–æ—Å–∫–∞ –∞—Ç–∞–∫–∏",
        content: throwDiceForm,
        label: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        callback: html => ({
          difficulty: Number(html.find("input[name='difficulty']").val() || 0),
          modificator: Number(html.find("input[name='modificator']").val() || 0),
          multiPenalty: Number(html.find("input[name='multiPenalty']").val() || 0),
          multiPenaltyCheck: Number(html.find("input[name='multiPenaltyCheck']").val() || 0),
          mode: html.find("input[name='mode']:checked").val(),
          count: Math.max(1, Number(html.find("input[name='count']").val() || 1))
        })
      });
    } catch {
      return;
    }

    // –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∑–æ–Ω—ã –ø–æ–ø–∞–¥–∞–Ω–∏—è
    const zoneHtml = `
      <form>
        <div class="form-group">
          <label>–ê—Ç–∞–∫—É—é—â–∏–π: ${actor.name}</label><br>
          <label>–ß–∞—Å—Ç—å —Ç–µ–ª–∞:</label>
          <select name="zone">
            ${Object.entries(hitZones).map(([zone, penalty]) => {
              const label = healTranslations[zone] || zone;
              return `<option value="${zone}">${label} (–®—Ç—Ä–∞—Ñ: ${penalty})</option>`;
            }).join("")}
          </select>
        </div><br>
        <div class="form-group" style="border:1px solid black; border-radius: 8px">
          <label>–¢–∏–ø —É—Ä–æ–Ω–∞:</label>
          <select name="damageType">
            ${Object.entries(damageTypes).map(([type, label]) =>
              `<option value="${type}">${label}</option>`).join("")}
          </select>
        </div>
        <div class="form-group">
          <label>–£—Ä–æ–Ω:</label>
          <input type="text" name="damage" value="${damage}" pattern="^(\\d+d\\d+(\\+\\d+)?|\\d+)$" />
        </div>
      </form>`;

    let zone, damageType, damageFormula;
    try {
      const result = await Dialog.prompt({
        title: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–∞–∫–∏",
        content: zoneHtml,
        label: "–ê—Ç–∞–∫–æ–≤–∞—Ç—å",
        callback: html => ({
          zone: html.find("select[name='zone']").val(),
          damageType: html.find("select[name='damageType']").val(),
          damage: html.find("input[name='damage']").val()
        })
      });
      zone = result.zone;
      damageType = result.damageType;
      damageFormula = result.damage;
    } catch {
      return;
    }

    const zoneLabel = translations[zone] || zone;
    const zoneLabelRaw = healTranslations[zone] || zone;
    const penalty = Number(hitZones[zone] ?? 0);
    const finalDifficulty = throwParams.difficulty + throwParams.modificator + penalty - Number(target.system.props.passiveDefence);

let damageSum = 0;
let damageMultiply = [];

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—Ä–æ—Å–∫–æ–≤
    for (let i = 1; i <= throwParams.count; i++) {
      const roll = await AttackSystem.rollAttack(throwParams.mode, finalDifficulty, throwParams.multiPenalty, throwParams.multiPenaltyCheck, i, count);
      if (roll.isSuccess) {
        const damageRollResult = await AttackSystem.applyAttackResult(damageFormula, roll.isCritical, roll.result);
        damageSum += damageRollResult.damageRollResult;
        damageMultiply.push(damageRollResult.damageRollResult);
      }
    }

          await ChatMessage.create({
        content: `
        <b>${actor.name}</b> –∞—Ç–∞–∫—É–µ—Ç <b>${target.name}</b> –ø–æ <b>${zoneLabel}</b> —Å –ø–æ–º–æ—â—å—é <b>${currentWeapon}</b>.<br>
        –ü–æ–ø—ã—Ç–∫–∞ —É—Ä–æ–Ω–∞: <b>${damageSum}</b> (${damageRollResult})<br><br>
        <details>
            <summary style="cursor: pointer; user-select: none;">–ü–æ–∫–∞–∑–∞—Ç—å / —Å–∫—Ä—ã—Ç—å –±—Ä–æ—Å–∫–∏:</summary>
            <ul>${damageMultiply}</ul>
        </details>
        <div style="display: flex; gap: 5px; justify-content: center;">
          <button class="apply-damage-button" title="–£—Ä–æ–Ω" style="padding: 5px;">‚öîÔ∏è</button>
          <button class="apply-critical-button" title="–ö—Ä–∏—Ç" style="padding: 5px;">üî•</button>
          <button class="apply-heal-button" title="–•–∏–ª" style="padding: 5px;">‚ù§Ô∏è</button>
        </div>
      `,
        whisper: ChatMessage.getWhisperRecipients("GM"),
              flags: {
        csbadditional: {
          applyDamage: {
      ...targetFlags, // —Å–æ–¥–µ—Ä–∂–∏—Ç actorId/tokenId/sceneId
      zone: zone,
      zoneLabel: zoneLabel,
      zoneLabelRaw: zoneLabelRaw,
      amount: damageSum,
      damageType: damageType,
      weapon: currentWeapon,
      attackerName: actor.name,
      originalFormula: damageFormula,
      difficulty: finalDifficulty,
      multiPenalty: throwParams.multiPenalty,
      multiPenaltyCheck: throwParams.multiPenaltyCheck,
      damageResults: damageMultiply // –º–∞—Å—Å–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –±—Ä–æ—Å–∫–æ–≤ —É—Ä–æ–Ω–∞
          }
        }
      }
      });

  }

  static async rollAttack(mode, difficulty, multiPenalty, multiPenaltyCheck, i, count) {
    if(multiPenaltyCheck != 0) {
      difficulty += multiPenalty * (i + multiPenaltyCheck);
    }
    else {
      difficulty += multiPenalty * (i - 1);
    }
    
    let modeMessage = `<b>–û–±—ã—á–Ω—ã–π –±—Ä–æ—Å–æ–∫</b>`;
    let attackFormula = "1d20";
    
    if (mode === "advantage") {
      attackFormula = "2d20kh";
      modeMessage = `<b style="color:darkgreen">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ</b>`;
    } else if (mode === "disadvantage") {
      attackFormula = "2d20kl";
      modeMessage = `<b style="color:darkred">–ü–æ–º–µ—Ö–∞</b>`;
    }

    const roll = await new Roll(attackFormula).roll();
    const result = roll.total;
    
    let isCritical = false;
    let isSuccess = false;
    let message = "";
    
    if (result === 1) {
      message = "–ö—Ä–∏—Ç. –ø–æ–ø–∞–¥–∞–Ω–∏–µ!";
      isCritical = true;
      isSuccess = true;
    } else if (result === 20) {
      message = "–ö—Ä–∏—Ç. –ø—Ä–æ–º–∞—Ö!";
    } else if (result <= difficulty) {
      message = "–ü–æ–ø–∞–¥–∞–Ω–∏–µ!";
      isSuccess = true;
    } else {
      message = "–ü—Ä–æ–º–∞—Ö!";
    }

    if (count <= 1) {
    await roll.toMessage({
      speaker: ChatMessage.getSpeaker(),
      flavor: `${modeMessage}<br><b>–ë—Ä–æ—Å–æ–∫ –Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ:</b> ${message}<br>–°–ª–æ–∂–Ω–æ—Å—Ç—å: <b>${Math.max(1, difficulty)}</b>`
    });
    }


    return { isSuccess, isCritical, result };
  }

  static async applyAttackResult(damageFormula, isCritical, rollResult) {
    const damageRoll = await new Roll(damageFormula).roll();
    const damageRollResult = damageRoll.total;
    return {damageRollResult};
  }
}